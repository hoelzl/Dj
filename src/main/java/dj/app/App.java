/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dj.app;

import dj.commandprocessor.CommandSelector;
import dj.core.Command;
import dj.core.ValuedItem;
import dj.dialog.*;
import dj.textui.TextCommandSelector;
import org.beryx.textio.TextIO;
import org.beryx.textio.TextIoFactory;
import org.beryx.textio.TextTerminal;

import java.util.ArrayList;
import java.util.List;

public class App {
    App() {
        TextIO textIO = TextIoFactory.getTextIO();
        terminal = textIO.getTextTerminal();

        DialogNotifier dialogNotifier = new DialogNotifier();
        dialogNotifier.register(new DialogObserver() {
            @Override
            public void onDisplay(ValuedItem<String> item) {
                String value = item.getValue();
                if (value != null) {
                    terminal.println(value);
                }
            }

            @Override
            public void onChoicesProposed(List<DialogChoice> proposedChoices) {
                List<Command> commands = new ArrayList<>();
                for (var choice : proposedChoices) {
                    commands.addAll(choice.provideCommands());
                }
                commands.add(commandSelector.getExitCommand());
                commandSelector.promptForAndExecuteSingleCommand(commands);
            }

            @Override
            public void onChoiceSelected(DialogChoice choice) {
            }
        });
        dialogInstance = new DialogInstance(dialogNotifier);

        DialogText initialText =
                new DialogText(dialogInstance, "Start", "The initial text.");
        dialogInstance.setInitialText(initialText);

        commands.addAll(dialogInstance.provideCommands());
        commands.add(commandSelector.getExitCommand());
    }

    public static void main(String[] args) {
        App app = new App();

        //noinspection StatementWithEmptyBody
        while (!app.commandSelector.promptForAndExecuteSingleCommand(
                app.commands)) {
        }
        System.exit(0);
    }

    public String getDefaultName() {
        return "world";
    }

    private CommandSelector commandSelector = new TextCommandSelector();
    private List<Command> commands = new ArrayList<>();
    private DialogInstance dialogInstance;
    private TextTerminal terminal;
}
